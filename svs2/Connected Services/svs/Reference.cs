//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace svs
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureType", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public enum SignatureType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XMLDSig = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GOST3410 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CAdES = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PDF = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MSOffice = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CMS = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerifyParams", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public enum VerifyParams : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignatureId = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignatureIndex = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hash = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HashAlgorithm = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VerifyPKCS7 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtractContent = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertVerifiersPluginsIds = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignersInfo", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class SignersInfo : object
    {
        
        private svs.AdditionalSignedDocumentInfo AdditionalInfoField;
        
        private svs.SignerInfo[] SignerInfoListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public svs.AdditionalSignedDocumentInfo AdditionalInfo
        {
            get
            {
                return this.AdditionalInfoField;
            }
            set
            {
                this.AdditionalInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public svs.SignerInfo[] SignerInfoList
        {
            get
            {
                return this.SignerInfoListField;
            }
            set
            {
                this.SignerInfoListField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdditionalSignedDocumentInfo", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class AdditionalSignedDocumentInfo : object
    {
        
        private byte[] ContentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this.ContentField;
            }
            set
            {
                this.ContentField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignerInfo", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class SignerInfo : object
    {
        
        private string IdField;
        
        private int IndexField;
        
        private string ParentIdField;
        
        private System.Collections.Generic.Dictionary<svs.CertificateInfoParams, string> SignerCertificateInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index
        {
            get
            {
                return this.IndexField;
            }
            set
            {
                this.IndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentId
        {
            get
            {
                return this.ParentIdField;
            }
            set
            {
                this.ParentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<svs.CertificateInfoParams, string> SignerCertificateInfo
        {
            get
            {
                return this.SignerCertificateInfoField;
            }
            set
            {
                this.SignerCertificateInfoField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateInfoParams", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public enum CertificateInfoParams : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubjectName = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IssuerName = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotAfter = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotBefore = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialNumber = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Thumbprint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KeyIdentifier = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class DssFault : object
    {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationResult", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class VerificationResult : object
    {
        
        private string MessageField;
        
        private bool ResultField;
        
        private byte[] SignerCertificateField;
        
        private System.Collections.Generic.Dictionary<svs.CertificateInfoParams, string> SignerCertificateInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SignerCertificate
        {
            get
            {
                return this.SignerCertificateField;
            }
            set
            {
                this.SignerCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<svs.CertificateInfoParams, string> SignerCertificateInfo
        {
            get
            {
                return this.SignerCertificateInfoField;
            }
            set
            {
                this.SignerCertificateInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationResultEx", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class VerificationResultEx : object
    {
        
        private string MessageField;
        
        private bool ResultField;
        
        private System.Collections.Generic.Dictionary<svs.SignatureInfoParams, string> SignatureInfoField;
        
        private byte[] SignerCertificateField;
        
        private System.Collections.Generic.Dictionary<svs.CertificateInfoParams, string> SignerCertificateInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<svs.SignatureInfoParams, string> SignatureInfo
        {
            get
            {
                return this.SignatureInfoField;
            }
            set
            {
                this.SignatureInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SignerCertificate
        {
            get
            {
                return this.SignerCertificateField;
            }
            set
            {
                this.SignerCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<svs.CertificateInfoParams, string> SignerCertificateInfo
        {
            get
            {
                return this.SignerCertificateInfoField;
            }
            set
            {
                this.SignerCertificateInfoField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureInfoParams", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public enum SignatureInfoParams : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CAdESType = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SigningTime = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LocalSigningTime = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataToBeSigned = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VsPolicy", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class VsPolicy : object
    {
        
        private svs.SignatureType[] AllowedSignatureTypesField;
        
        private svs.SignatureTypeDescription[] SignatureDescriptionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public svs.SignatureType[] AllowedSignatureTypes
        {
            get
            {
                return this.AllowedSignatureTypesField;
            }
            set
            {
                this.AllowedSignatureTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public svs.SignatureTypeDescription[] SignatureDescriptions
        {
            get
            {
                return this.SignatureDescriptionsField;
            }
            set
            {
                this.SignatureDescriptionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureTypeDescription", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
    public partial class SignatureTypeDescription : object
    {
        
        private string[] FileExtensionsField;
        
        private svs.SignatureType SignatureTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] FileExtensions
        {
            get
            {
                return this.FileExtensionsField;
            }
            set
            {
                this.FileExtensionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public svs.SignatureType SignatureType
        {
            get
            {
                return this.SignatureTypeField;
            }
            set
            {
                this.SignatureTypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://dss.cryptopro.ru/services/2015/04/", ConfigurationName="svs.IVerificationService")]
    public interface IVerificationService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/GetSignersInfo", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/GetSignersInfoRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/GetSignersInfoDssFa" +
            "ultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.SignersInfo> GetSignersInfoAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignature", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureDssF" +
            "aultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult> VerifySignatureAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureAll", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureAllR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureAllD" +
            "ssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult[]> VerifySignatureAllAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "ture", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureDssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult> VerifyDetachedSignatureAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureAll", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureAllDssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult[]> VerifyDetachedSignatureAllAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyGost34102001", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyGost34102001R" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyGost34102001D" +
            "ssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult> VerifyGost34102001Async(byte[] certificate, byte[] signature, byte[] data, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyRawSignature", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyRawSignatureR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyRawSignatureD" +
            "ssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult> VerifyRawSignatureAsync(byte[] certificate, byte[] signature, byte[] data, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureEx", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureExRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureExDs" +
            "sFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResultEx> VerifySignatureExAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureAllE" +
            "x", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureAllE" +
            "xResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifySignatureAllE" +
            "xDssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResultEx[]> VerifySignatureAllExAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureEx", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureExResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureExDssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResultEx> VerifyDetachedSignatureExAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureAllEx", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureAllExResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyDetachedSigna" +
            "tureAllExDssFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResultEx[]> VerifyDetachedSignatureAllExAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyCertificate", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyCertificateRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/VerifyCertificateDs" +
            "sFaultFault", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VerificationResult> VerifyCertificateAsync(byte[] certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/GetPolicy", ReplyAction="http://dss.cryptopro.ru/services/2015/04/IVerificationService/GetPolicyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(svs.DssFault), Action="http://dss.cryptopro.ru/services/2015/04/IVerificationService/GetPolicyDssFaultFa" +
            "ult", Name="DssFault", Namespace="http://dss.cryptopro.ru/services/schemas/2014/06/")]
        System.Threading.Tasks.Task<svs.VsPolicy> GetPolicyAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IVerificationServiceChannel : svs.IVerificationService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class VerificationServiceClient : System.ServiceModel.ClientBase<svs.IVerificationService>, svs.IVerificationService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public VerificationServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(VerificationServiceClient.GetBindingForEndpoint(endpointConfiguration), VerificationServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VerificationServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(VerificationServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VerificationServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(VerificationServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VerificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<svs.SignersInfo> GetSignersInfoAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.GetSignersInfoAsync(signatureType, document, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult> VerifySignatureAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifySignatureAsync(signatureType, document, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult[]> VerifySignatureAllAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifySignatureAllAsync(signatureType, document, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult> VerifyDetachedSignatureAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifyDetachedSignatureAsync(signatureType, document, signature, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult[]> VerifyDetachedSignatureAllAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifyDetachedSignatureAllAsync(signatureType, document, signature, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult> VerifyGost34102001Async(byte[] certificate, byte[] signature, byte[] data, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifyGost34102001Async(certificate, signature, data, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult> VerifyRawSignatureAsync(byte[] certificate, byte[] signature, byte[] data, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifyRawSignatureAsync(certificate, signature, data, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResultEx> VerifySignatureExAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifySignatureExAsync(signatureType, document, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResultEx[]> VerifySignatureAllExAsync(svs.SignatureType signatureType, byte[] document, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifySignatureAllExAsync(signatureType, document, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResultEx> VerifyDetachedSignatureExAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifyDetachedSignatureExAsync(signatureType, document, signature, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResultEx[]> VerifyDetachedSignatureAllExAsync(svs.SignatureType signatureType, byte[] document, byte[] signature, System.Collections.Generic.Dictionary<svs.VerifyParams, string> verifyParams)
        {
            return base.Channel.VerifyDetachedSignatureAllExAsync(signatureType, document, signature, verifyParams);
        }
        
        public System.Threading.Tasks.Task<svs.VerificationResult> VerifyCertificateAsync(byte[] certificate)
        {
            return base.Channel.VerifyCertificateAsync(certificate);
        }
        
        public System.Threading.Tasks.Task<svs.VsPolicy> GetPolicyAsync()
        {
            return base.Channel.GetPolicyAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IVerificationService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IVerificationService1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IVerificationService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.251.85.74/SVS/service.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IVerificationService1))
            {
                return new System.ServiceModel.EndpointAddress("https://dsslab:4430/SVS/service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IVerificationService,
            
            BasicHttpBinding_IVerificationService1,
        }
    }
}
